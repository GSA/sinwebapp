## ENVIRONMENT CONFIGURATION
## DESCRIPTION: Determines how the application functions, i.e. where or if it searches for services such
##               S3 or the Postgres SQL database.
## 
## ENVIRONMENT
## VALUES: (local, container, cloud, mcaas, local_mcaas) 
## local: PLEASE SET TO local IF RUNNING THROUGH 'gunicorn' or 'python manage.py' DIRECTLY FROM COMMAND LINE
## container: PLEASE SET TO container IF RUNNING THROUGH 'docker-compose up' or 'scripts/build-container.sh' FROM COMMAND LINE
## cloud: CLOUDFOUNDRY READS ENVIRONMENT VARIABLES CONFIGURED THROUGH 'cf' COMMAND LINE INTERFACE (CLI),
##          OR THROUGH 'env' ATTRIBUTES SPECIFIED IN THE 'manifest.yml'. ENSURE THE MANIFEST
##          CONTAINS AN ENVIRONMENT ATTRIBUTE SET EQUAL TO 'cloud'
## local_mcaas: TRICKS THE CONTAINER INTO THINKING IT HAS BEEN DEPLOYED ONTO MCAAS.
## 
## DEVELOPMENT
## VALUES: true, false
## true: this flag will enable an 'ng serve' development server for live reloading of changes to the frontend 
##          code base on port 4200.
##        In
## NOTE: this flag only applies within the 'container' environment, i.e. setting it true while ENVIRONMENT='container' 
##          will expose an additional port (4200) inside of the container binded to the 'ng serve' process. 
APP_ENV=local
DEVELOPMENT=false
PYTHON_VERSION=3.7.7
ANGULAR_VERSION=10.1.1

## SECRET KEY CONFIGURATION
## DESCRIPTION: Used by the Django Backend To Sign Requests
## local or container: THIS FIELD DOES NOT NEED CHANGED
## cloud: CLOUDFOUNDRY READS ENVIRONMENT VARIABLES CONFIGURED THROUGH 'cf' COMMAND LINE INTERFACE (CLI).
##          PLEASE CONFIGURE CF ENV FOR APPLICATION TO HAVE CORRESPONDING ENVIRONMENT VARIABLE 
##              SECRET_KEY=xxxxxxxx
##          IF DEPLOYING ON CLOUD
SECRET_KEY=thisismyriflethisismygun

## AUTHENTICATION CONFIGURATION
## DESCRIPTION: Used by Django Backend to configure OAuth Workflow And Sign Requests.
##
## local or container: THESE FIELDS DO NOT NEED CHANGED
## cloud: THESE FIELDS ARE CONFIGURED THROUGH THE 'scripts/setup/setup-cloud-env.sh' SCRIPT
UAA_CLIENT_ID=fakeclientid
UAA_CLIENT_SECRET=fake-uaa-provider-client-secret

# DJANGO ADMIN CONFIGURATION
## DESCRIPTION: Configures Django's Super User
## 
## local or container: DOESN'T NEED TO BE REAL EMAIL, BUT MUST END IN 'gsa.gov' (SINCE THAT IS
##                      THE DOMAIN THE APPLICATION WILL BE RESTRICTED TO THROUGH THE 'cloud.gov'
##                       IDENTITY-SERVICE PROVIDER )
## cloud: CLOUDFOUNDRY READS ENVIRONMENT VARIABLES CONFIGURED THROUGH 'cf' COMMAND LINE INTERFACE (CLI).
##          PLEASE CONFIGURE CF ENV FOR APPLICATION TO HAVE CORRESPONDING ENVIRONMENT VARIABLES
##              DJANGO_SUPERUSER_USERNAME, DJANGO_SUPERUSER_EMAIL
##          IF DEPLOYING ON THE CLOUD. PASSWORD DOES NOT TECHNICALLY NEED SET SINCE AUTHENTICATION
##          IS HANDLED BY CLOUD.GOV OAUTH. ALTERNATIVELY, RUN 'scripts/setup/setup-cloud-env.sh' SCRIPT
##          TO COPY THE VALUES IN 'env/local.env' VARIABLES ONTO THE CLOUD ENVIRONMENT. 
DJANGO_SUPERUSER_USERNAME=grantmoore
DJANGO_SUPERUSER_EMAIL=grant.moore@gsa.gov
DJANGO_SUPERUSER_PASSWORD=xxxxxxx

# GUNICORN CONFIGURATION
## THIS FIELD DOES NOT NEED CHANGED
WEB_CONCURRENCY=3

# AWS S3 CONFIGURATION
## local or container: THESE FIELDS DO NOT NEED CHANGED
## cloud: THESE FIELDS ARE PROVIDED BY VCAP_SERVICES
AWS_ACCESS_KEY_ID=xxx
AWS_SECRET_ACCESS_KEY=xxx
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET_NAME=dx-ccda

# POSTGRES CONFIGURATION
## local or container: CONFIGURE DATABASE CONNECTION
## cloud: THESE FIELDS ARE PROVIDED BY VCAP_SERVICES
##     
## POSTGRES_HOST:
##  local: localhost
##  container: database (OR NAME OF 'postgres' SERVICE DEFINED IN 'docker-compose.yml')
POSTGRES_HOST=localhost
POSTGRES_DB=sinwebapp
POSTGRES_USER=postgres
POSTGRES_PASSWORD=xxxx
POSTGRES_PORT=5432

# MYSQL CONFIGURATION
# 
## if you set environment to 'local_mcaas', you can trick the application into thinking 
## it's on mcaas on your local. this will cause the application to connect to the mysql 
MYSQL_HOST=mcaas_db
MYSQL_DATABASE=ccda
MYSQL_USER=mysql
MYSQL_ROOT_PASSWORD=root
MYSQL_PASSWORD=root
MYSQL_PORT=3306

#EMAIL CONFIGURATION
## local or container: CONFIGURE EMAIL CONNECTION
## cloud: CLOUDFOUNDRY READS ENVIRONMENT VARIABLES CONFIGURED THROUGH 'cf' COMMAND LINE INTERFACE (CLID).
##          PLEASE CONFIGURE CF ENV FOR APPLICATION TO HAVE CORRESPONDING ENVIRONMENT VARIABLES
##              EMAIL_HOST, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD
##          IF DEPLOYING ON THE CLOUD. ALTERNATIVELY, RUN 'scripts/setup/setup-cloud-env.sh' SCRIPT
##          TO COPY THE VALUES IN 'env/local.env' VARIABLES ONTO THE CLOUD ENVIRONMENT. 
EMAIL_HOST=smtp.gmail.com
EMAIL_HOST_USER=xxxxx@gmail.com
EMAIL_HOST_PASSWORD=xxxxx